package frames;

import javax.swing.JOptionPane;
import models.VendingMachine;

/**
 * The MaintenanceFrame Class represents the maintenance menu to be displayed
 *
 * @author LIM, Theoni Anne
 *         TELOSA, Arwyn Gabrielle
 * @version 1.0
 * @since 07-22-2023
 */
public class MaintenanceFrame extends javax.swing.JFrame {

    private MainFrame sourceFrame;
    private VendingMachine vendingMachine;
    /**
     * The MaintenanceFrame Constructor creates new form MaintenanceFrame
     *
     * @param sourceFrame reference to main frame
     * @param vendingMachine current instance of vending machine
     */
    public MaintenanceFrame(MainFrame sourceFrame, VendingMachine vendingMachine) {
        initComponents();
        this.sourceFrame = sourceFrame;
        this.vendingMachine = vendingMachine;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prompt = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        setPrice = new javax.swing.JButton();
        collect = new javax.swing.JButton();
        replenish = new javax.swing.JButton();
        display = new javax.swing.JButton();
        stock = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Maintenance Features");
        setName("Maintenance Features"); // NOI18N

        prompt.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        prompt.setText("Maintenance Features");

         /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        back.setText("Back to Main Menu");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

         /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        setPrice.setText("Set Price");
        setPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPriceActionPerformed(evt);
            }
        });

         /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        collect.setText("Collect Payment");
        collect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectActionPerformed(evt);
            }
        });

         /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        replenish.setText("Replenish Money");
        replenish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replenishActionPerformed(evt);
            }
        });

         /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        display.setText("Display Transaction Summary");
        display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActionPerformed(evt);
            }
        });

         /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        stock.setText("Stock");
        stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stock, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prompt)
                    .addComponent(setPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(display, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                        .addComponent(replenish, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(collect, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(prompt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(stock, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(collect, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(replenish, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Handles the action event for the 'setPrice' button.
     *
     * @param evt the action event triggered by the 'setPrice' button click.
     */
    private void setPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPriceActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new SetPriceFrame(this, vendingMachine).setVisible(true);
    }//GEN-LAST:event_setPriceActionPerformed

    /**
     * Handles the action event for the 'stock' button.
     *
     * @param evt the action event triggered by the 'setPrice' button click.
     */
    private void stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new StockFrame(this, vendingMachine).setVisible(true);
    }//GEN-LAST:event_stockActionPerformed

    /**
     * Handles the action event for the 'collect' button.
     *
     * @param evt the action event triggered by the 'setPrice' button click.
     */
    private void collectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectActionPerformed
        // TODO add your handling code here:
        int[] cash = vendingMachine.collectPayment();
        JOptionPane.showMessageDialog(null, arrToDenoms(cash), "Amount Collected", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_collectActionPerformed

    /**
     * Handles the action event for the 'replenish' button.
     *
     * @param evt the action event triggered by the 'setPrice' button click.
     */
    private void replenishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replenishActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new ReplenishMoneyFrame(this, vendingMachine).setVisible(true);
    }//GEN-LAST:event_replenishActionPerformed

    /**
     * Handles the action event for the 'transaction' button.
     *
     * @param evt the action event triggered by the 'setPrice' button click.
     */
    private void displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new TransactionSummaryFrame(this, vendingMachine).setVisible(true);
    }//GEN-LAST:event_displayActionPerformed

    /**
     * Handles the action event for the 'back to main menu' button.
     *
     * @param evt the action event triggered by the 'setPrice' button click.
     */
    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        dispose();
        sourceFrame.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    /**
     * Converts an integer array representing quantity of denominations to 
     * a string array with human-readable format.
     *
     * @param arr the integer array representing quantity for each denomination
     * @return a string array with formatted denomination information
     */
    private String[] arrToDenoms(int[] arr){
        String[] denoms = new String[arr.length];
        for (int i = 0; i < arr.length; i++){
            denoms[i] = "[" + arr[i] + "x] P" + VendingMachine.denominations[i];
        }
        return denoms;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton collect;
    private javax.swing.JButton display;
    private javax.swing.JLabel prompt;
    private javax.swing.JButton replenish;
    private javax.swing.JButton setPrice;
    private javax.swing.JButton stock;
    // End of variables declaration//GEN-END:variables
}
