package frames;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import models.VendingMachine;

/**
 * The ReplenishMoneyFrame Class represents the GUI for replenishing payment.
 *
 * @author LIM, Theoni Anne
 *         TELOSA, Arwyn Gabrielle
 * @version 1.0
 * @since 07-22-2023
 */
public class ReplenishMoneyFrame extends JFrame {
    private int totalReplenished;
    private int[] cashInStorage;
    private VendingMachine vendingMachine;
    private MaintenanceFrame sourceFrame;

    /**
     * The ReplenishMoneyFrame Constructor creates new ReplenishMoneyFrame
     * @param sourceFrame reference to main frame
     * @param vendingMachine instance of current vending machine
     */
    public ReplenishMoneyFrame(MaintenanceFrame sourceFrame, VendingMachine vendingMachine) {
        this.sourceFrame = sourceFrame;
        this.vendingMachine = vendingMachine;
        initComponents();
        cashInStorage = new int[9];
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        this.setTitle("Replenish Money");

        
        jLabel1 = new javax.swing.JLabel();
        denominationButton1 = new JButton();
        denominationButton2 = new JButton();
        denominationButton3 = new JButton();
        denominationButton4 = new JButton();
        denominationButton5 = new JButton();
        denominationButton6 = new JButton();
        denominationButton7 = new JButton();
        denominationButton8 = new JButton();
        denominationButton9 = new JButton();
        finishReplenishButton = new JButton();
        totalReplenishedLabel = new JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Select which denominations you would like to replenish (pesos):");

        denominationButton1.setText("PHP 1");
        denominationButton2.setText("PHP 5");
        denominationButton3.setText("PHP 10");
        denominationButton4.setText("PHP 20");
        denominationButton5.setText("PHP 50");
        denominationButton6.setText("PHP 100");
        denominationButton7.setText("PHP 200");
        denominationButton8.setText("PHP 500");
        denominationButton9.setText("PHP 1000");

        finishReplenishButton.setText("Finish Replenish");

        totalReplenishedLabel.setText("0");

        getContentPane().setLayout(new java.awt.GridLayout(0, 1, 10, 10));

        getContentPane().add(jLabel1);
        getContentPane().add(denominationButton1);
        getContentPane().add(denominationButton2);
        getContentPane().add(denominationButton3);
        getContentPane().add(denominationButton4);
        getContentPane().add(denominationButton5);
        getContentPane().add(denominationButton6);
        getContentPane().add(denominationButton7);
        getContentPane().add(denominationButton8);
        getContentPane().add(denominationButton9);
        getContentPane().add(finishReplenishButton);
        getContentPane().add(totalReplenishedLabel);

        pack();

        /**
         * Handles the action event triggered by a UI component.
         * Increments the total payment by 1
         *
         * @param evt the action event that was triggered
         */
        denominationButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                totalReplenished += 1;
                cashInStorage[0]++;
                totalReplenishedLabel.setText(String.valueOf(totalReplenished));
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * Increments the total payment by 5
         *
         * @param evt the action event that was triggered
         */
        denominationButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                totalReplenished += 5;
                cashInStorage[1]++;
                totalReplenishedLabel.setText(String.valueOf(totalReplenished));
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * Increments the total payment by 10
         *
         * @param evt the action event that was triggered
         */
        denominationButton3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                totalReplenished += 10;
                cashInStorage[2]++;
                totalReplenishedLabel.setText(String.valueOf(totalReplenished));
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * Increments the total payment by 20
         *
         * @param evt the action event that was triggered
         */
        denominationButton4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                totalReplenished += 20;
                cashInStorage[3]++;
                totalReplenishedLabel.setText(String.valueOf(totalReplenished));
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * Increments the total payment by 50
         *
         * @param evt the action event that was triggered
         */
        denominationButton5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                totalReplenished += 50;
                cashInStorage[4]++;
                totalReplenishedLabel.setText(String.valueOf(totalReplenished));
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * Increments the total payment by 100
         *
         * @param evt the action event that was triggered
         */
        denominationButton6.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                totalReplenished += 100;
                cashInStorage[5]++;
                totalReplenishedLabel.setText(String.valueOf(totalReplenished));
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * Increments the total payment by 200
         *
         * @param evt the action event that was triggered
         */
        denominationButton7.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                totalReplenished += 200;
                cashInStorage[6]++;
                totalReplenishedLabel.setText(String.valueOf(totalReplenished));
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * Increments the total payment by 500
         *
         * @param evt the action event that was triggered
         */
        denominationButton8.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                totalReplenished += 500;
                cashInStorage[7]++;
                totalReplenishedLabel.setText(String.valueOf(totalReplenished));
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * Increments the total payment by 1000
         *
         * @param evt the action event that was triggered
         */
        denominationButton9.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                totalReplenished += 1000;
                cashInStorage[8]++;
                totalReplenishedLabel.setText(String.valueOf(totalReplenished));
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        finishReplenishButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                vendingMachine.replenishMoney(cashInStorage);
                displayReplenishMessage(totalReplenished);
                dispose();
                sourceFrame.setVisible(true);
            }
        });

        pack();
    }

    /**
     * Displays message after finished replenishing money
     * @param total total money replenished
     */
    public void displayReplenishMessage(int total) {
        JOptionPane.showMessageDialog(this, "Replenished a total of PHP " + total + "!");
    }

    private javax.swing.JButton denominationButton1;
    private javax.swing.JButton denominationButton2;
    private javax.swing.JButton denominationButton3;
    private javax.swing.JButton denominationButton4;
    private javax.swing.JButton denominationButton5;
    private javax.swing.JButton denominationButton6;
    private javax.swing.JButton denominationButton7;
    private javax.swing.JButton denominationButton8;
    private javax.swing.JButton denominationButton9;
    private javax.swing.JButton finishReplenishButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel totalReplenishedLabel;
}
