package frames;


import items.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import models.VendingMachine;

/**
 * The AddItemFrame class is for when the user creates a vending machine.
 * It initializes the items that are going to be inside the vending machine
 *
 * @author LIM, Theoni Anne
 *         TELOSA, Arwyn Gabrielle
 * @version 1.0
 * @since 07-22-2023
 */
public class AddItemFrame extends javax.swing.JFrame {
    
    private VendingMachine vendingMachine;
    private MainFrame sourceFrame;
    private ArrayList<Item> itemList = new ArrayList();
 
    /**
     * Constructor for AddItemFrame
     * @param mainFrame reference to main frame
     * @param vendingMachine instance of current vending machine
     */
    public AddItemFrame(MainFrame mainFrame, VendingMachine vendingMachine) {
        initComponents();
        sourceFrame = mainFrame;
        this.vendingMachine = vendingMachine;
        if (vendingMachine.getClass().getSimpleName().equals("SpecialVendingMachine")){
            buns.setEnabled(false);
            beef.setEnabled(false);
            chicken.setEnabled(false);
            plant.setEnabled(false);
        }
    }
    
    /**
     * Sets initial itemList to given itemList
     * @param itemList
     */
    public void setItemList(ArrayList<Item> itemList){
        this.itemList = itemList;
        this.itemList.add(new Buns());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        promptLbl = new javax.swing.JLabel();
        beef = new javax.swing.JButton();
        chicken = new javax.swing.JButton();
        cheese = new javax.swing.JButton();
        eggs = new javax.swing.JButton();
        fries = new javax.swing.JButton();
        mayo = new javax.swing.JButton();
        mushrooms = new javax.swing.JButton();
        mustard = new javax.swing.JButton();
        onion = new javax.swing.JButton();
        pickles = new javax.swing.JButton();
        plant = new javax.swing.JButton();
        secretSauce = new javax.swing.JButton();
        sundae = new javax.swing.JButton();
        tomato = new javax.swing.JButton();
        coke = new javax.swing.JButton();
        ketchup = new javax.swing.JButton();
        finish = new javax.swing.JButton();
        buns = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Item");
        setPreferredSize(new java.awt.Dimension(450, 420));

        promptLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        promptLbl.setText("Which item do you want to add to the vending machine?");

        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        beef.setText("Beef");
        beef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beefActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        chicken.setText("Chicken");
        chicken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chickenActionPerformed(evt);
            }
        });

         /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */       
        cheese.setText("Cheese");
        cheese.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cheeseActionPerformed(evt);
            }
        });

         /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */       
        eggs.setText("Eggs");
        eggs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eggsActionPerformed(evt);
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        fries.setText("Fries");
        fries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friesActionPerformed(evt);
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */      
        mayo.setText("Mayo");
        mayo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mayoActionPerformed(evt);
            }
        });

         /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */       
        mushrooms.setText("Mushrooms");
        mushrooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mushroomsActionPerformed(evt);
            }
        });

        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */        
        mustard.setText("Mustard");
        mustard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mustardActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        onion.setText("Onion");
        onion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onionActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        pickles.setText("Pickles");
        pickles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picklesActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        plant.setText("Plant");
        plant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plantActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        secretSauce.setText("Secret Sauce");
        secretSauce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secretSauceActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        sundae.setText("Sundae");
        sundae.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sundaeActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        tomato.setText("Tomato");
        tomato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tomatoActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        coke.setText("Coke");
        coke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cokeActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        ketchup.setText("Ketchup");
        ketchup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ketchupActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        finish.setText("Finish adding");
        finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishActionPerformed(evt);
            }
        });
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        buns.setText("Buns");
        buns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bunsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addComponent(promptLbl))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(39, 39, 39)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(buns, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(beef, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cheese, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chicken, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(eggs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fries, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mayo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(coke, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ketchup, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(secretSauce, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                .addComponent(mustard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mushrooms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sundae, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tomato, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(plant, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pickles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(onion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(finish, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(promptLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(beef)
                    .addComponent(mushrooms))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chicken)
                    .addComponent(mustard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cheese)
                    .addComponent(onion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pickles)
                    .addComponent(coke))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eggs)
                    .addComponent(plant))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fries)
                    .addComponent(secretSauce))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sundae)
                    .addComponent(ketchup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mayo)
                    .addComponent(tomato))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buns)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(finish)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */   
    private void eggsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eggsActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else {
        itemList.add(new Eggs());
            eggs.setEnabled(false);
        }
    }//GEN-LAST:event_eggsActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void onionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onionActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Onion());
            
        onion.setEnabled(false);
        }
        


    }//GEN-LAST:event_onionActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void beefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beefActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
            
        itemList.add(new Beef());
        beef.setEnabled(false);
        }

    }//GEN-LAST:event_beefActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void mustardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mustardActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Mustard());
            
        mustard.setEnabled(false);
        }

    }//GEN-LAST:event_mustardActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void picklesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picklesActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Pickles());
            
        pickles.setEnabled(false);
        }

    }//GEN-LAST:event_picklesActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void chickenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chickenActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Chicken());
        chicken.setEnabled(false);
            
        }

    }//GEN-LAST:event_chickenActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void cheeseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cheeseActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        
        itemList.add(new Cheese());
        cheese.setEnabled(false);
        }

    }//GEN-LAST:event_cheeseActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void cokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cokeActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Coke());
        coke.setEnabled(false);
            
        }


    }//GEN-LAST:event_cokeActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void friesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friesActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Fries());
        fries.setEnabled(false);
            
        }


    }//GEN-LAST:event_friesActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void ketchupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ketchupActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Ketchup());
        ketchup.setEnabled(false);
            
        }


    }//GEN-LAST:event_ketchupActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void mayoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mayoActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Mayo());
        mayo.setEnabled(false);
            
        }


    }//GEN-LAST:event_mayoActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void mushroomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mushroomsActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Mushrooms());
        mushrooms.setEnabled(false);
            
        }


    }//GEN-LAST:event_mushroomsActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void plantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plantActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Plant());
        plant.setEnabled(false);
            
        }


    }//GEN-LAST:event_plantActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void secretSauceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secretSauceActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new SecretSauce());
        secretSauce.setEnabled(false);
            
        }


    }//GEN-LAST:event_secretSauceActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void sundaeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sundaeActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Sundae());
            
        sundae.setEnabled(false);
        }


    }//GEN-LAST:event_sundaeActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void tomatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tomatoActionPerformed
        // TODO add your handling code here:
        if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Tomato());
        tomato.setEnabled(false);
            
        }


    }//GEN-LAST:event_tomatoActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void finishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishActionPerformed
        // TODO add your handling code here:
        if (itemList.size() < 8 || itemList.size() > 10){
            JOptionPane.showMessageDialog(null, "Number of items must be between 8 and 10");
        } else {
            for (Item item : itemList){
                vendingMachine.addProduct(item);
            }
            
            JOptionPane.showMessageDialog(null, "Succesfully created a vending machine!");
            dispose();
            sourceFrame.setVisible(true);
        }
    }//GEN-LAST:event_finishActionPerformed
    
     /**
     * Handles the action events, such as adding a Beef item to the item list.
     *
     * @param evt the action event associated with the beef-related UI action
     */  
    private void bunsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bunsActionPerformed
        // TODO add your handling code here:
         if (itemList.size() == 10)
            JOptionPane.showMessageDialog(null, "Max items reached.");
        else{
        itemList.add(new Buns());
        buns.setEnabled(false);
            
        }
    }//GEN-LAST:event_bunsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton beef;
    private javax.swing.JButton buns;
    private javax.swing.JButton cheese;
    private javax.swing.JButton chicken;
    private javax.swing.JButton coke;
    private javax.swing.JButton eggs;
    private javax.swing.JButton finish;
    private javax.swing.JButton fries;
    private javax.swing.JButton ketchup;
    private javax.swing.JButton mayo;
    private javax.swing.JButton mushrooms;
    private javax.swing.JButton mustard;
    private javax.swing.JButton onion;
    private javax.swing.JButton pickles;
    private javax.swing.JButton plant;
    private javax.swing.JLabel promptLbl;
    private javax.swing.JButton secretSauce;
    private javax.swing.JButton sundae;
    private javax.swing.JButton tomato;
    // End of variables declaration//GEN-END:variables
}
