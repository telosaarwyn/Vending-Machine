package frames;

import items.Item;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import models.SpecialVendingMachine;
import models.VendingMachine;

/**
 * The IngredientsFrame Class is the GUI for customizing burgers.
 * @author LIM, Theoni Anne
 *         TELOSA, Arwyn Gabrielle
 * @version 1.0
 * @since 07-22-2023
 */
public class IngredientsFrame extends javax.swing.JFrame {

    private MainFrame sourceFrame;
    private SpecialVendingMachine vendingMachine;
    
    /**
     * The IngredientsFrame method is the constructor for IngredientsFrame
     *
     * @param sourceFrame reference to main frame
     * @param vendingMachine current instance of vending machine
     */
    public IngredientsFrame(MainFrame sourceFrame, SpecialVendingMachine vendingMachine) {
        this.sourceFrame = sourceFrame;
        this.vendingMachine = vendingMachine;
        initComponents();
        displayItems();
        patties.setModel(new DefaultComboBoxModel(vendingMachine.getPatties().toArray()));
        Item selectedItem = (Item) patties.getSelectedItem();
        vendingMachine.addPatty(selectedItem.getClass().getSimpleName());
        patQuantity.setText("Quantity: " + (vendingMachine.getItems().get(selectedItem.getClass().getSimpleName()).size()-1));
        patCal.setText("Calories: " + selectedItem.getCalories());
        patPrice.setText("Price: P" + selectedItem.getPrice());
        bunsQuantity.setText("Quantity: " + (vendingMachine.getItems().get("Buns").size()-1));
        bunsCal.setText("Calories: " + vendingMachine.getItems().get("Buns").get(0).getCalories());
        bunsPrice.setText("Price: P" + vendingMachine.getItems().get("Buns").get(0).getPrice());
    }
    
    /**
     * Displays items from the vending machine in a UI panel, excluding specific items like "Beef", "Chicken", "Buns", and "Plant".
     */    
    private void displayItems(){
        for (String itemName : vendingMachine.getItems().keySet()){
            
            if (itemName.equals("Beef") || itemName.equals("Chicken") || itemName.equals("Buns") || itemName.equals("Plant"))
                continue;
            
            JPanel subPanel = new JPanel();
            subPanel.setLayout(new GridLayout(4, 1, 2, 0));

            JLabel nameLbl = new JLabel(itemName);
            nameLbl.setFont(new Font("Arial", Font.PLAIN, 12));

            JLabel caloriesLbl = new JLabel("Calories: " + Float.toString(vendingMachine.getItems().get(itemName).get(0).getCalories()));
            caloriesLbl.setFont(new Font("Arial", Font.PLAIN, 12));


            JLabel priceLbl = new JLabel("Price: P" + Integer.toString(vendingMachine.getItems().get(itemName).get(0).getPrice()));
            priceLbl.setFont(new Font("Arial", Font.PLAIN, 12));


            JSlider slider = new JSlider(0, vendingMachine.getItems().get(itemName).size()-1, 0);
            slider.setPaintTrack(true);
            slider.setMajorTickSpacing(1);
            slider.setPaintLabels(true);
            slider.addChangeListener(new ChangeListener(){
                @Override
                /**
                 * The stateChanged method responds to changes in the slider's state by updating the selected topping quantity in the vending machine.
                 *
                 * @param e the change event triggered by the slider's state change.
                 */
                public void stateChanged(ChangeEvent e) {
                    vendingMachine.selectTopping(itemName, slider.getValue());
                }

            });


            subPanel.add(slider);
            subPanel.add(nameLbl);
            subPanel.add(caloriesLbl);
            subPanel.add(priceLbl);
            toppingsPanel.add(subPanel);
        }
   }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pattyLbl = new javax.swing.JLabel();
        patties = new javax.swing.JComboBox<>();
        toppingsPanel = new javax.swing.JPanel();
        toppingsLbl = new javax.swing.JLabel();
        finish = new javax.swing.JButton();
        patQuantity = new javax.swing.JLabel();
        patPrice = new javax.swing.JLabel();
        patCal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bunsQuantity = new javax.swing.JLabel();
        bunsCal = new javax.swing.JLabel();
        bunsPrice = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Ingredients");

        pattyLbl.setText("Select a patty: ");
        
        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        patties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pattiesActionPerformed(evt);
            }
        });

        toppingsPanel.setLayout(new java.awt.GridLayout(5, 2, 3, 1));

        toppingsLbl.setText("Add toppings:");

        /**
         * Handles the action event triggered by a UI component.
         * 
         * @param evt the action event that was triggered
         */
        finish.setText("Finish");
        finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishActionPerformed(evt);
            }
        });

        patQuantity.setText("jLabel1");

        patPrice.setText("jLabel2");

        patCal.setText("jLabel3");

        jLabel1.setText("Buns");

        bunsQuantity.setText("jLabel2");

        bunsCal.setText("jLabel3");

        bunsPrice.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toppingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toppingsLbl)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pattyLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patties, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(patQuantity)
                                .addGap(88, 88, 88)
                                .addComponent(jLabel1))
                            .addComponent(patCal)
                            .addComponent(patPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bunsPrice)
                            .addComponent(bunsCal)
                            .addComponent(bunsQuantity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addComponent(finish)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pattyLbl)
                    .addComponent(patties, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finish)
                    .addComponent(patQuantity)
                    .addComponent(jLabel1)
                    .addComponent(bunsQuantity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patCal)
                    .addComponent(bunsCal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toppingsLbl)
                    .addComponent(patPrice)
                    .addComponent(bunsPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toppingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the selection event for the patties drop-down menu.
     *
     * @param evt the action event triggered by the patties drop-down menu selection.
     */    
    private void pattiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pattiesActionPerformed
        // TODO add your handling code here:
        Item selectedItem = (Item) patties.getSelectedItem();
        vendingMachine.clearPatties();
        vendingMachine.addPatty(selectedItem.getClass().getSimpleName());
        patQuantity.setText("Quantity: " + (vendingMachine.getItems().get(selectedItem.getClass().getSimpleName()).size()-1));
        patCal.setText("Calories: " + selectedItem.getCalories());
        patPrice.setText("Price: P" + selectedItem.getPrice());
    }//GEN-LAST:event_pattiesActionPerformed
    
    /**
     * Handles the finish action event, processing the payment and providing appropriate responses.
     *
     * @param evt the action event triggered by the finish action.
     */
    private void finishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishActionPerformed
        // TODO add your handling code here:
       
        vendingMachine.setItemToDispense();
        
        int[] result = vendingMachine.produceChange();
        switch (result[0]){
            case -1:
                JOptionPane.showMessageDialog(null, "Insufficient Payment, returning payment.");
                JOptionPane.showMessageDialog(null, vendingMachine.returnPayment(), "Return", JOptionPane.PLAIN_MESSAGE);
                vendingMachine.clearTray();
                dispose();
                sourceFrame.setVisible(true);
                break;
            case -2:
                JOptionPane.showMessageDialog(null, "Not enough change in vending machine.");
                JOptionPane.showMessageDialog(null, vendingMachine.returnPayment(), "Return", JOptionPane.PLAIN_MESSAGE);
                vendingMachine.clearTray();
                dispose();
                sourceFrame.setVisible(true);
                break;
            default:
                JOptionPane.showMessageDialog(null, "Success! Here's your change.");
                JOptionPane.showMessageDialog(null, arrToDenoms(result), "Change", JOptionPane.PLAIN_MESSAGE);
                dispose();
                new CheckoutFrame(sourceFrame, vendingMachine).setVisible(true);
        }
    }//GEN-LAST:event_finishActionPerformed
    
    /**
     * Converts an array of integer quantities into a corresponding array of denomination strings.
     * @param arr an array of quantities for each denomination
     * @return an array of strings representing the quantity of each denomination
     */    
    private String[] arrToDenoms(int[] arr){
        String[] denoms = new String[arr.length];
        for (int i = 0; i < arr.length; i++){
            denoms[i] = "[" + arr[i] + "x] P" + VendingMachine.denominations[i];
        }
        return denoms;
      }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bunsCal;
    private javax.swing.JLabel bunsPrice;
    private javax.swing.JLabel bunsQuantity;
    private javax.swing.JButton finish;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel patCal;
    private javax.swing.JLabel patPrice;
    private javax.swing.JLabel patQuantity;
    private javax.swing.JComboBox<String> patties;
    private javax.swing.JLabel pattyLbl;
    private javax.swing.JLabel toppingsLbl;
    private javax.swing.JPanel toppingsPanel;
    // End of variables declaration//GEN-END:variables
}
